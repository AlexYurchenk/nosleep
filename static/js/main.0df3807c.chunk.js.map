{"version":3,"sources":["components/List.js","components/Chart.js","App.js","index.js"],"names":["List","tasks","setTasks","tasksPars","JSON","parse","length","map","name","startDate","endDate","id","hourSpend","hoursShouldSpend","Number","type","onBlur","e","currentTarget","value","find","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","dateFormate","toLocaleDateString","weekday","year","month","day","split","Chart","tasksStr","duration","labels","shouldHoursSpend","spendHoursInRealLife","i","date","Date","setDate","getDate","push","allTasksInADay","filter","shouldSpendHoursSum","reduce","sum","current","spendHoursInRealLifeSum","data","datasets","label","borderColor","backgroundColor","options","responsive","plugins","legend","position","title","display","text","App","useState","setName","setStartDate","sprintStartDate","setSprintStartDate","setEndDate","setDuration","hours","setHours","maxDate","selected","onChange","onSubmit","preventDefault","task","shortid","generate","s","minDate","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0df3807c.chunk.js","sourcesContent":["export default function List({ tasks, setTasks }) {\r\n  const tasksPars = JSON.parse(tasks);\r\n  return (\r\n    <ul>\r\n      {tasksPars.length >= 1 &&\r\n        tasksPars.map(\r\n          ({ name, startDate, endDate, id, hourSpend, hoursShouldSpend }) => (\r\n            <li key={id}>\r\n              <p>{name} name</p>\r\n              <p>{hoursShouldSpend} hoursShouldSpend</p>\r\n              <p>{startDate} startDate</p>\r\n              <p>{endDate} endDate</p>\r\n              {Number(hourSpend) === 0 ? (\r\n                <input\r\n                  type=\"number\"\r\n                  onBlur={(e) => {\r\n                    if (Number(e.currentTarget.value) > 0)\r\n                      tasksPars.find((e) => e.id === id).hourSpend = Number(\r\n                        e.currentTarget.value\r\n                      );\r\n                    setTasks(tasksPars);\r\n                  }}\r\n                />\r\n              ) : (\r\n                <p>{hourSpend} hourSpend</p>\r\n              )}\r\n            </li>\r\n          )\r\n        )}\r\n    </ul>\r\n  );\r\n}\r\n","import { Line } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\nconst dateFormate = (e) => {\r\n  const options = {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  return e.toLocaleDateString(\"en-US\", options).split(\",\")[1];\r\n};\r\nexport default function Chart({ tasksStr, duration, startDate }) {\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"My Chart\",\r\n      },\r\n    },\r\n  };\r\n  let labels = [];\r\n  let shouldHoursSpend = [];\r\n  let spendHoursInRealLife = [];\r\n\r\n  const tasks = JSON.parse(tasksStr);\r\n  for (let i = 0; i < duration; i++) {\r\n    const date = new Date(new Date(startDate).setDate(startDate.getDate() + i));\r\n    labels.push(dateFormate(date));\r\n    const allTasksInADay = tasks.filter(\r\n      ({ startDate }) => startDate === dateFormate(date)\r\n    );\r\n    const shouldSpendHoursSum = allTasksInADay.reduce(\r\n      (sum, current) => sum + current.hoursShouldSpend,\r\n      0\r\n    );\r\n\r\n    const spendHoursInRealLifeSum = allTasksInADay.reduce(\r\n      (sum, current) => sum + current.hourSpend,\r\n      0\r\n    );\r\n    shouldHoursSpend.push(shouldSpendHoursSum);\r\n    spendHoursInRealLife.push(spendHoursInRealLifeSum);\r\n  }\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Should hours spend\",\r\n        data: shouldHoursSpend,\r\n        borderColor: \"rgb(255, 99, 132)\",\r\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n      },\r\n      {\r\n        label: \"Hours de facto\",\r\n        data: spendHoursInRealLife,\r\n        borderColor: \"rgb(53, 162, 235)\",\r\n        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Line options={options} data={data} />;\r\n}\r\n","import React, { useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport shortid from \"shortid\";\nimport List from \"./components/List\";\nimport Chart from \"./components/Chart\";\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date());\n  const [sprintStartDate, setSprintStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n  const [tasks, setTasks] = useState([]);\n  const [duration, setDuration] = useState(0);\n  const [hours, setHours] = useState(0);\n  const reset = () => {\n    setHours(0);\n    setName(\"\");\n  };\n  const dateFormate = (e) => {\n    const options = {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    };\n    return e.toLocaleDateString(\"en-US\", options).split(\",\")[1];\n  };\n  const maxDate = new Date(sprintStartDate).setDate(\n    sprintStartDate.getDate() + duration\n  );\n  return (\n    <>\n      <DatePicker\n        selected={sprintStartDate}\n        onChange={(date) => setSprintStartDate(date)}\n      />\n      <input\n        type=\"number\"\n        value={duration}\n        onChange={(e) => setDuration(Number(e.currentTarget.value))}\n      />\n      <br />\n      <br />\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const task = {\n            id: shortid.generate(),\n            name,\n            startDate: dateFormate(startDate),\n            endDate: dateFormate(endDate),\n            hourSpend: 0,\n            hoursShouldSpend: hours,\n          };\n          setTasks((s) => [...s, task]);\n          reset();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.currentTarget.value)}\n        />\n        <input\n          type=\"number\"\n          value={hours}\n          onChange={(e) => setHours(Number(e.currentTarget.value))}\n        />\n        <DatePicker\n          selected={startDate}\n          onChange={(date) => setStartDate(date)}\n          minDate={sprintStartDate}\n          maxDate={maxDate}\n        />\n        <DatePicker\n          minDate={startDate}\n          maxDate={maxDate}\n          selected={endDate}\n          onChange={(date) => setEndDate(date)}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <List setTasks={setTasks} tasks={JSON.stringify(tasks)} />\n      <Chart\n        setTasks={setTasks}\n        tasksStr={JSON.stringify(tasks)}\n        duration={duration}\n        startDate={sprintStartDate}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}